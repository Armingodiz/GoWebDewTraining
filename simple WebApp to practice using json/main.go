package main

import (
	"html/template"
	"net/http"
	"strconv"
)

var tpl *template.Template
var story AutoGenerated

func init() {
	story = getStory()
	tpl = template.Must(template.ParseFiles("index.gohtml"))
}
func main() {
	http.HandleFunc("/", handler)
	http.ListenAndServe(":8585", nil)

}
func handler(w http.ResponseWriter, req *http.Request) {
	var input interface{}
	if req.Method == http.MethodPost {
		c, err := req.Cookie("storyPart")
		checkErr(err)
		openStory := setCurrentStory(c.Value)
		option := req.FormValue("option")
		index, err := strconv.Atoi(option)
		checkErr(err)
		newDest := openStory.Options[index-1].Arc
		input = setCurrentStory(newDest)
		newC := &http.Cookie{
			Name:  "storyPart",
			Value: newDest,
		}
		http.SetCookie(w, newC)
	} else if req.Method == http.MethodGet {
		input = story.Intro
		cook := &http.Cookie{
			Name:  "storyPart",
			Value: "intro",
		}
		http.SetCookie(w, cook)
	}
	err := tpl.Execute(w, input)
	checkErr(err)
}

func setCurrentStory(name string) storyPart {
	if name == "intro" {
		return storyPart(story.Intro)
	} else if name == "new-york" {
		return storyPart(story.NewYork)
	} else if name == "debate" {
		return storyPart(story.Debate)
	} else if name == "denver" {
		return storyPart(story.Denver)
	} else if name == "market-bates" {
		return storyPart(story.MarkBates)
	} else if name == "sean-kelly" {
		return storyPart(story.SeanKelly)
	} else {
		return storyPart(story.Home)
	}
}
